# -*- coding: utf-8 -*-
"""Sistem Cerdas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I635MD1TjcIQ9GR-9X_B6Drjp5CTd9ZA

### Import library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import csv
import math
import os

from google.colab import drive
drive.mount('/content/gdrive')

#read dataset
# print(os.listdir('gdrive/MyDrive/Colab Notebooks/sistem cerdas/Colab Notebooks/'))
df = pd.read_excel('gdrive/MyDrive/Colab Notebooks/sistem cerdas/Colab Notebooks/movie_review.xlsx')
df.head(3)

#Masukan tiap kolom ke dalam array
id_movie = df['id']
viewers = df['viewers']
rating = df['movie_rating']

data_id = []
data_viewers = []
data_rating = []

for i in id_movie:
    data_id.append(i)
for i in viewers:
    data_viewers.append(i)
for i in rating:
    data_rating.append(i)

"""### Fuzzyfikasi"""

# Sigmoid range kolom rating
a = 1.0
b = 2.0
c = 3.0

b2 = 4.0
c2 = 0.1

a3 = 5.5
b3 = 6.5
c3 = 7.5 

#pendifinisan fungsi sigmoid dan beta
def small(x):
    if (x <= a):
        return 1
    elif ((a < x) and (x <= b)):
        return 1-2*(((x-a)/(c-a))**2)
    elif ((b < x) and (x < c)):
        return (2*((c-x)/(c-a))**2)
    elif (x >= c):
        return 0
    
def medium(x):
    return 1/(1+abs((x-b2)/c2)**2)

def large(x):
    if (x <= a3):
        return 0
    elif ((a3 < x) and (x <= b3)):
        return 2*(((x-a3)/(c3-a3))**2)
    elif ((b3 < x) and (x < c3)):
        return 1-(2*((c3-x)/(c3-a3))**2)
    else:
        return 1

x = np.arange(0, 10, 0.01)
y1 = []
y2 = []
y3 = []

for i in (x):
    y1.append(small(i))
    y2.append(medium(i))
    y3.append(large(i))

# Visualisasi data untuk fuzzyset movie_rating   
plt.figure(figsize=(12,6))
plt.plot(x, y1, label='rating small')
plt.plot(x, y2, label='rating medium')
plt.plot(x, y3, label='rating large')
plt.legend(loc='lower right')  
plt.show()
    
# Pengisian fuzzyset movie_rating -> indeks 1: small, indeks 2: medium, Indeks 3: large
fuzzy_rating = []
for i in data_rating:
    t1 = ["small", (small(float(i)))]
    t2 = ["medium", (medium(float(i)))]
    t3 = ["large", (large(float(i)))]
    fuzzy_rating.append([t1, t2, t3])

# Sigmoid range kolom viewers
a = 10000 
b = 20000
c = 30000

b2 = 40000
c2 = 2000

a3 = 45000
b3 = 65000
c3 = 85000 


#pendifinisan fungsi sigmoid dan beta
def low(x):
    if (x <= a):
        return 1
    elif ((a < x) and (x <= b)):
        return 1-2*(((x-a)/(c-a))**2)
    elif ((b < x) and (x < c)):
        return (2*((c-x)/(c-a))**2)
    elif (x >= c):
        return 0
    
def mid(x):
    return 1/(1+abs((x-b2)/c2)**2)

def high(x):
    if (x <= a3):
        return 0
    elif ((a3 < x) and (x <= b3)):
        return 2*(((x-a3)/(c3-a3))**2)
    elif ((b3 < x) and (x < c3)):
        return 1-(2*((c3-x)/(c3-a3))**2)
    else:
        return 1 


x = np.arange(0, 100000, 1)
y1 = []
y2 = []
y3 = []

for i in (x):
    y1.append(low(i))
    y2.append(mid(i))
    y3.append(high(i))

# Visualisasi data untuk fuzzyset viewers
plt.figure(figsize=(12,6))   
plt.plot(x, y1, label='Viewers low')
plt.plot(x, y2, label='Viewers mid')
plt.plot(x, y3, label='Viewers high')
plt.legend(loc='lower right')
plt.show()

# Pengisian fuzzyset viewers -> indeks 1: low, indeks 2: mid, Indeks 3: high
fuzzy_viewers = []
for i in data_viewers:
    t1 = ["low", (low(float(i)))]
    t2 = ["mid", (mid(float(i)))]
    t3 = ["high", (high(float(i)))]
    fuzzy_viewers.append([t1, t2, t3])

"""## Inferensi"""

# Pendefinisian rule Inferensi
def inferensi(x):
    if x[0][0] == "low" and x[1][0] == "small" and x[0][1] < x[1][1]:
        return ["false", x[0][1]]
    if x[0][0] == "low" and x[1][0] == "medium" and x[0][1] < x[1][1]:
        return ["false", x[0][1]]
    if x[0][0] == "low" and x[1][0] == "large" and x[0][1] < x[1][1]:
        return ["true", x[0][1]]
    if x[0][0] == "mid" and x[1][0] == "small" and x[0][1] < x[1][1]:
        return ["false", x[0][1]]
    if x[0][0] == "mid" and x[1][0] == "medium" and x[0][1] < x[1][1]:
        return ["false", x[0][1]]
    if x[0][0] == "mid" and x[1][0] == "large" and x[0][1] < x[1][1]:
        return ["true", x[0][1]]
    if x[0][0] == "high" and x[1][0] == "small" and x[0][1] < x[1][1]:
        return ["true", x[0][1]]
    if x[0][0] == "high" and x[1][0] == "medium" and x[0][1] < x[1][1]:
        return ["true", x[0][1]]
    if x[0][0] == "high" and x[1][0] == "large" and x[0][1] < x[1][1]:
        return ["true", x[0][1]]
    
    if x[0][0] == "low" and x[1][0] == "small" and x[0][1] >= x[1][1]:
        return ["false", x[1][1]]
    if x[0][0] == "low" and x[1][0] == "medium" and x[0][1] >= x[1][1]:
        return ["false", x[1][1]]
    if x[0][0] == "low" and x[1][0] == "large" and x[0][1] >= x[1][1]:
        return ["true", x[1][1]]
    if x[0][0] == "mid" and x[1][0] == "small" and x[0][1] >= x[1][1]:
        return ["false", x[1][1]]
    if x[0][0] == "mid" and x[1][0] == "medium" and x[0][1] >= x[1][1]:
        return ["false", x[1][1]]
    if x[0][0] == "mid" and x[1][0] == "large" and x[0][1] >= x[1][1]:
        return ["true", x[1][1]]
    if x[0][0] == "high" and x[1][0] == "small" and x[0][1] >= x[1][1]:
        return ["true", x[1][1]]
    if x[0][0] == "high" and x[1][0] == "medium" and x[0][1] >= x[1][1]:
        return ["true", x[1][1]]
    if x[0][0] == "high" and x[1][0] == "large" and x[0][1] >= x[1][1]:
        return ["true", x[1][1]]

# Disjungsi ditampung pada array
def disjungsi(x, y):
    tempX = ["Yes", 0]
    tempY = ["No", 0]
    for i in range(len(x)):
        if x[i][0] == "true" and x[i][1] > tempX[1]:
            tempX = ["Yes", x[i][1]]
        elif x[i][0] == "false" and x[i][1] > tempY[1]:
            tempY = ["No", x[i][1]]  
    return [y+1, tempX, tempY]

temp = []
Fuzzy = []
arr_konjungsi = [] # array data konjungsi
arr_disjungsi = [] # array data disjungsi

# Permutasi data fuzzy set untuk konjungsi disjungsi, permutasi ada 9 tiap id_movie, Total data : 900
for i in range(len(id_movie)):
    for j in range(len(fuzzy_rating[i])):
        for k in range(len(fuzzy_viewers[j])):
            temp = [fuzzy_viewers[i][j], fuzzy_rating[j][k]]
            Fuzzy.append(temp)
            
temp = []
count = 0
for i in range(len(Fuzzy)):
    if count < 8:
        count = count + 1
        temp.append(inferensi(Fuzzy[i]))
    else:
        arr_konjungsi.append(temp)
        count = 0
        temp = []

        
for i in range(len(arr_konjungsi)):
    arr_disjungsi.append(disjungsi(arr_konjungsi[i], i))

"""## Defuzzyfikasi"""

# Defuzzyfikasi menggunakan sugeno
Defuzzy = []
lolos = 1
tidak = 100

def DefuzzySugeno(x, y):
    return ((x * tidak) + (y * lolos)) / (x + y)

for i in range(len(arr_disjungsi)):
    a = arr_disjungsi[i][1][1]
    b = arr_disjungsi[i][2][1]
    Defuzzy.append([i+1, DefuzzySugeno(a,b)])

# Mengurutkan data berdasarkan nilai kelayakan
Defuzzy = sorted(Defuzzy, key=lambda kk: kk[1], reverse = True)
temp_id = []
temp_defuzzy = []

# Mengambil 10 data yg telah terurut
for i in range(10):
    temp_id.append(Defuzzy[i][0])
    temp_defuzzy.append(int(Defuzzy[i][1]))
    
# Menyimpan 10 data ke movie.csv
x = pd.DataFrame(columns=['id_movie', 'nilai_kelayakan'])
# x.columns = ['id_movie', 'nilai_kelayakan']
x.id_movie = temp_id
x.nilai_kelayakan = temp_defuzzy
x.to_excel("movie.xlsx", index=False)

x

